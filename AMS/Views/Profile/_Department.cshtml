@using AMS.Models.Profile
@model DepartmentVM
@{
}
<input asp-for="StaffIde" type="hidden" />
<div class="d-flex justify-content-between align-items-center my-5">
    <h3 class="card-title font-weight-bolder text-dark-75 text-hover-primary font-size-h4 m-0">@Resource.ListOfDepartments</h3>
    @if (User.HasClaim("7dp", "c"))
    {
        <button onclick="add_department('@Model.StaffIde')" class="btn btn-primary btn-pure float-right">@Resource.AddDepartment</button>
    }
</div>
<table id="tbl_department" class="table table-striped table-bordered table-hover">
    <thead>
        <tr>
            <th>#</th>
            <th>@Resource.Department</th>
            <th>@Resource.StaffType</th>
            <th>@Resource.StartDate</th>
            <th>@Resource.EndDate</th>
            <th class="text-center" data-orderable="false">@Resource.Actions</th>
        </tr>
    </thead>
    <tbody></tbody>
</table>

<script>
    $(document).ready(function () {
        render_attendance_tbl(@Json.Serialize(Model.Departments));
    });

    function render_attendance_tbl(data) {
        var has_claim_edit = '@User.HasClaim("7dp", "e")' == 'True' ? true : false;
        var has_claim_delete = '@User.HasClaim("7dp", "d")' == 'True' ? true : false;
        var has_claim = has_claim_edit || has_claim_delete;

        $('#tbl_department').DataTable({
            destroy: true,
            language: {
                url: `/Culture/DataTable/${culture}.json`
            },
            keys: true,
            responsive: true,
            pageLength: 20,
            data: data,
            deferRender: true,
            columnDefs: [
                { targets: [0, 5], searchable: false },
                { className: "button-td text-center", targets: [5] },
                { visible: has_claim, targets: [5] },
                { width: "5%", targets: [0, 5] },
                { defaultContent: "///", targets: "_all" }
            ],
            order: [[0, "asc"]],
            columns: [
                {
                    data: function (data, type, row, meta) {
                        return meta.row + meta.settings._iDisplayStart + 1;
                    }
                },
                { data: "department" },
                { data: "staffType" },
                {
                    data: function (row, type, set) {
                        return moment(row.startDate).format('DD/MM/YYYY');
                    }
                },
                {
                    data: function (row, type, set) {
                        return moment(row.endDate).format('DD/MM/YYYY');
                    }
                },
                {
                    data: function (row, type, set) {
                        var date_time_now = new Date();
                        var end_date = new Date(Date.parse(row.endDate));
                        var active = end_date >= date_time_now ? true : false;

                        var dropdown = '<div class="dropdown dropleft cursor-pointer">' +
                            '<button type="button" class="btn btn-secondary btn-sm dropdown-toggle" data-toggle="dropdown">@Resource.Actions</button>' +
                            '<div class="dropdown-menu dropdown-grid" role="menu" x-placement="bottom-start" style="position: absolute; transform: translate3d(0px, 29px, 0px); top: 0px; left: 0px; will-change: transform;">';
                        if (active && has_claim_edit) {
                            dropdown += '<button type="button" class="dropdown-item cursor-pointer" onclick="edit_department(\'' + row.staffDepartmentIde + '\')">@Html.Raw(ActionButton.Edit.Replace("\'","\""))<span class="title" style="margin-top: 3px; margin-left: 10px;">@Resource.Edit</span></button>';
                        }
                        if (active && has_claim_delete) {
                            dropdown += '<button type="button" class="dropdown-item cursor-pointer" onclick="delete_department(\'' + row.staffDepartmentIde + '\')">@Html.Raw(ActionButton.Delete.Replace("\'","\""))<span class="title" style="margin-top: 3px; margin-left: 10px;">@Resource.Delete</span></button>';
                        }
                        dropdown += '</div></div>';
                        return dropdown;
                    }
                }
            ]
        });
    }

    function add_department(ide) {
        $('#modal-large').find('.modal-content').load('@Url.Action("_AddDepartment", "Staff")?ide=' + ide, function () {
            $('#modal-large').modal('toggle');
        });
    }

    function edit_department(ide) {
        $('#modal-large').find('.modal-content').load('@Url.Action("_EditDepartment", "Staff")?ide=' + ide, function () {
            $('#modal-large').modal('toggle');
        });
    }

    function delete_department(ide) {
        Swal.fire({
            title: "@Html.Raw(Resource.AreYouSure)",
            text: "@Html.Raw(Resource.SureYouWantToDeleteDepartmentForStaff)",
            icon: "question",
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: "@Resource.Yes",
            cancelButtonText: "@Resource.No"
        }).then((result) => {
            if (result.value) {
                $.post('@Url.Action("DeleteDepartment", "Staff")', {
                    ide: ide,
                    __RequestVerificationToken: $("[name='__RequestVerificationToken']").val()
                }, function (data) {
                    handle_success(data, SubmitPathType.RELOAD, "");
                });
            }
        });
    }
</script>
